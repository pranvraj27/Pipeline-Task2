
pipeline {
    agent any
    environment {
        NODE_VERSION = '14.x' // Specify Node.js version
        EMAIL_RECIPIENTS = 'pranav27rajans@gmail.com'
    }
    stages {
        stage('Build') {
            steps {
                script {
                    // Install Node.js version
                    sh 'nvm install $NODE_VERSION'
                    // Install dependencies
                    sh 'npm install'
                    // Build the project
                    sh 'npm run build'
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                script {
                    // Run unit tests
                    sh 'npm run test'
                    // Run integration tests (if applicable)
                    sh 'npm run integration-test'
                }
            }
            post {
                always {
                    junit 'test-results/*.xml' // Collect test results
                }
                failure {
                    mail to: "$EMAIL_RECIPIENTS",
                         subject: "Build Failed - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                         body: "Build failed in stage: ${env.STAGE_NAME}"
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    // Run code analysis using a tool like ESLint
                    sh 'npm run lint'
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    // Perform a security scan using a tool like npm audit
                    sh 'npm audit'
                }
            }
            post {
                always {
                    // Send email with the security scan results
                    mail to: "$EMAIL_RECIPIENTS",
                         subject: "Security Scan Completed - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                         body: "Security scan completed in stage: ${env.STAGE_NAME}",
                         attachmentsPattern: '**/npm-audit-report.json'
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    // Deploy to staging server
                    sh 'scp -r ./dist user@staging-server:/path/to/deploy'
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                script {
                    // Run integration tests on the staging environment
                    sh 'ssh user@staging-server "cd /path/to/deploy && npm run test:staging"'
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                script {
                    // Deploy to production server
                    sh 'scp -r ./dist user@production-server:/path/to/deploy'
                }
            }
        }
    }
    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        success {
            mail to: "$EMAIL_RECIPIENTS",
                 subject: "Build Succeeded - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Build succeeded!"
        }
        failure {
            mail to: "$EMAIL_RECIPIENTS",
                 subject: "Build Failed - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                 body: "Build failed!"
        }
    }
}
